# Ansible managed
# vim: ft=muttrc
set beep_new = yes
set charset = "utf-8"
set pager_context = 5
set sort = threads
set include = yes
set editor = "nvim +':set textwidth=72' +':set wrap'"
set mbox_type = Maildir
set realname = "Ben Burwell"
set use_envelope_from = yes
set move = no
set delete = yes
set mail_check = 5
set timeout = 30
set wait_key = no
unset record
set query_command = "khard email --parsable '%s'"
set edit_headers = yes

bind index gg first-entry
bind index G last-entry
bind pager k previous-line
bind pager j next-line
bind editor <Tab> complete-query
bind editor ^T complete

mailboxes +INBOX

# viewing
ignore *
unignore from: to: cc: date: subject:
hdr_order from: to: cc: date: subject:
auto_view text/html
alternative_order text/plain text/html
set pipe_decode = yes
set pager_stop = yes

# pgp
set crypt_autosign = no
set pgp_auto_decode = yes
set pgp_autoinline = no
set pgp_check_exit = yes
set pgp_use_gpg_agent = yes

# Note that we explicitly set the comment armor header since GnuPG, when used
# in some localiaztion environments, generates 8bit data in that header, thereby
# breaking PGP/MIME.

# decode application/pgp
#set pgp_decode_command="gpg --status-fd=2 %?p?--passphrase-fd 0? --no-verbose --quiet --batch --output - %f"
set pgp_decode_command="gpg --status-fd=2 --no-verbose --quiet --batch --output - %f"

# verify a pgp/mime signature
set pgp_verify_command="gpg --status-fd=2 --no-verbose --quiet --batch --output - --verify %s %f"

# decrypt a pgp/mime attachment
#set pgp_decrypt_command="gpg --status-fd=2 %?p?--passphrase-fd 0? --no-verbose --quiet --batch --output - %f"
set pgp_decrypt_command="gpg --status-fd=2 --no-verbose --quiet --batch --output - %f"

# create a pgp/mime signed attachment
# set pgp_sign_command="gpg-2comp --comment '' --no-verbose --batch --output - %?p?--passphrase-fd 0? --armor --detach-sign --textmode %?a?-u %a? %f"
#set pgp_sign_command="gpg --no-verbose --batch --quiet --output - %?p?--passphrase-fd 0? --armor --detach-sign --textmode %?a?-u %a? %f"
set pgp_sign_command="gpg --no-verbose --batch --quiet --output - --armor --detach-sign --textmode %?a?-u %a? %f"

# create a application/pgp signed (old-style) message
# set pgp_clearsign_command="gpg-2comp --comment '' --no-verbose --batch --output - %?p?--passphrase-fd 0? --armor --textmode --clearsign %?a?-u %a? %f"
#set pgp_clearsign_command="gpg --no-verbose --batch --quiet --output - %?p?--passphrase-fd 0? --armor --textmode --clearsign %?a?-u %a? %f"
set pgp_clearsign_command="gpg --no-verbose --batch --quiet --output - --armor --textmode --clearsign %?a?-u %a? %f"

# create a pgp/mime encrypted attachment
# set pgp_encrypt_only_command="pgpewrap gpg-2comp -v --batch --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"
set pgp_encrypt_only_command="pgpewrap gpg --batch --quiet --no-verbose --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"

# create a pgp/mime encrypted and signed attachment
# set pgp_encrypt_sign_command="pgpewrap gpg-2comp %?p?--passphrase-fd 0? -v --batch --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"
#set pgp_encrypt_sign_command="pgpewrap gpg %?p?--passphrase-fd 0? --batch --quiet --no-verbose --textmode --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"
set pgp_encrypt_sign_command="pgpewrap gpg --batch --quiet --no-verbose --textmode --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"

# import a key into the public key ring
set pgp_import_command="gpg --no-verbose --import %f"

# export a key from the public key ring
set pgp_export_command="gpg --no-verbose --export --armor %r"

# verify a key
set pgp_verify_key_command="gpg --verbose --batch --fingerprint --check-sigs %r"

# read in the public key ring
set pgp_list_pubring_command="gpg --no-verbose --batch --quiet --with-colons --list-keys %r" 

# read in the secret key ring
set pgp_list_secring_command="gpg --no-verbose --batch --quiet --with-colons --list-secret-keys %r" 

# fetch keys
# set pgp_getkeys_command="pkspxycwrap %r"

# pattern for good signature - may need to be adapted to locale!

# set pgp_good_sign="^gpgv?: Good signature from "

# OK, here's a version which uses gnupg's message catalog:
# set pgp_good_sign="`gettext -d gnupg -s 'Good signature from "' | tr -d '"'`"

# This version uses --status-fd messages
set pgp_good_sign="^\\[GNUPG:\\] GOODSIG"

macro index S "<enter-command>unset wait_key<enter><shell-escape>mutt-notmuch-py ~/Mail/temporary/search<enter><change-folder-readonly>+../temporary/search<enter>" "search mail (using notmuch)"
macro index,pager A "<pipe-message>khard add-email<return>" "add the sender email address to khard"

# colors
color hdrdefault blue          default
color quoted     blue          default
color signature  blue          default
color attachment red           default
color message    brightred     default
color error      brightred     default
color indicator  brightgreen   default
color status     brightblue    default
color tree       white         default
color normal     white         default
color markers    red           default
color search     white         default
color tilde      brightmagenta default
color index      blue          default ~F
color index      green         default "~N|~O"

# use first mailbox by default
set folder = "~/Mail/Fastmail"
set from = "ben@benburwell.com"
set spoolfile = "+INBOX"
set postponed = "+Drafts"
set record = "+Sent"
set trash = "+Archive"
set sendmail = "/usr/local/bin/msmtp --account=fastmail"
alternates "benburwell@fastmail.com" "ben@virtyx.com" "@benburwell.com$" "bburwell1@gmail.com"
